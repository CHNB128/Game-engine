(def a {:a 15})
(def s :a)
(s a)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test"))})
(use 'engine.example.gamma)
(main)
fn
clojre.core/fn
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test"))})
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(import 'org.lwjgl.glfw GLFW GLFWErrorCallback GLFWKeyCallback)
(import '(org.lwjgl.glfw GLFW GLFWErrorCallback GLFWKeyCallback))
(GLFWErrorCallback/createPrint System/err)
  (->> (GLFWErrorCallback/createPrint System/err)
       (swap! global assoc :errorCallback))
(use :reload 'engine.core)
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use 'engine.example.gamma)
(main)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.resource.manager)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(use :reload 'engine.core
)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(pprint *1)
(loop!)
(pprint @global)
(loop!)
(exit!)
(exit)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(use :reload 'engine.core)
(loop!)
(stop)
(use :reload 'engine.core)
(loop!)
(stop)
(pprint global)
(use :reload 'engine.core)
(loop!)
(pprint global)
(loop!)
(stop)
(:processor @global)
((:processor @global))
((:processor @global) global)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(use 'engine.example.omega)
(use 'engine.example.gamma)
(main)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(loop!)
(stop)
(use :reload engine.graphic.render)
(init-gl)
global
@global
(pprint *1)
(use :reload 'engine.graphic.render)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(loop!)
(stop)
(name :a)
(get {:a 15 :b 78} :a)
(use 'engine.level.scene)
(use :reload 'engine.level.scene)
(change-scene {} "asd")
(change-scene (atom nil) "asd")
(change-scene (atom {:scenes nil}) "asd")
(keyword "asd")
(use :reload 'engine.level.scene)
(change-scene (atom {:scenes nil}) "asd")
(init)
(init {})
(:title @*1)
*1
(init {})
*1
(def a *1)
(:title @a)
(:title a)
a
@a
(:title @a)
(:window @a)
(new-scene {} {})
(remove-scene (atom nil) {})
(use :reload 'engine.level.scene)
(remove-scene (atom nil) {})
(change-scene (atom {:scenes nil}) "asd")
(use 'engine.level.core)
(import (org.lwjgl.assimp)
)
(import '(org.lwjgl.assimp)
)
(import '(org.lwjgl.assimp))
assimp
(import org.lwjgl.assimp)
(import org.lwjgl.assimp assimp)
(import org.lwjgl.assimp.assimp)
(import java.util.objects)
(import java.util.Objects)
(import org.lwjgl.assimp.Assimp)
(Assimp/aiGetLegalString)
(Assimp/aiGetVersionMajor)
(doto Assimp aiGetVersionMajorDD
(doto Assimp (aiGetVersionMajor))
(doto Assimp (.aiGetVersionMajor))
(doto Assimp (. aiGetVersionMajor))
(Assimp/aiGetCompileFlags)
(Assimp/aiGetImportFormatCount)
(for [x (iterate (range (Assimp/aiGetImportFormatCount)))] (let [desc (Objects/requireNonNull (Assimp/aiGetImportFormatDescription(x)))] (prn desc)))
(Object/requireNonNull)
(.requireNonNull Object)
(Assimp/aiGetImportFormatDescription 1)
(Assimp/aiGetImportFormatDescription 2)
(Assimp/aiGetImportFormatDescription 47)
(Assimp/aiGetImportFormatDescription 46)
(Assimp/aiGetImportFormatDescription 0)
(use 'engine.level.core)
(info)
(info 1)
(use 'engine.level.core :reload)
(info 1)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(range 0 (Assimp/aiGetImportFormatCount))
(import org.lwjgl.assimp.Assimp)
(range 0 (Assimp/aiGetImportFormatCount))
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(use 'engine.level.core :reload)
(info)
(import org.lwjgl.openal.AL11)
  (AL11/alcOpenDevice 
    (AL11/alcGetString (0, AL/ALC_DEFAULT_DEVICE_SPECIFIER))));)));
(AL11/alcOpenDevice (AL11/alcGetString (0, AL/ALC_DEFAULT_DEVICE_SPECIFIER))
)
(AL11/alcOpenDevice (AL11/alcGetString (0, AL11/ALC_DEFAULT_DEVICE_SPECIFIER))))
(AL11/alcOpenDevice (AL11/alcGetString (0, AL11/ALC_DEFAULT_DEVICE_SPECIFIER))
)
(import org.lwjgl.openal.ALC)
(AL11/alcOpenDevice (AL11/alcGetString (0, ALC/ALC_DEFAULT_DEVICE_SPECIFIER)))
(import org.lwjgl.openal.ALC11)
(AL11/alcOpenDevice (AL11/alcGetString (0, ALC11/ALC_DEFAULT_DEVICE_SPECIFIER)))
(ALC11/ALC_DEFAULT_DEVICE_SPECIFIER)
(ALC11/ALC_ALL_DEFAULT_DEVICE_SPECIFIER)
(ALC11/ALC_DEFAULT_ALL_DEVICE_SPECIFIER)
(ALC11/ALC_ALL_DEVICES_SPECIFIER)
(ALC11/ALC_DEVICES_SPECIFIER)
(import org.lwjgl.openal.ALC)
(ALC/ALC_DEVICES_SPECIFIER)
(import org.lwjgl.openal.ALC10)
(ALC10/ALC_DEVICES_SPECIFIER)
(ALC10/ALC_DEVICE_SPECIFIER)
(AL10/alcOpenDevice (AL10/alcGetString (0, ALC10/ALC_DEVICE_SPECIFIER)))
(import org.lwjgl.openal.AL10)
(AL10/alcOpenDevice (AL10/alcGetString (0, ALC10/ALC_DEVICE_SPECIFIER)))
(use 'engine.sound.core)
(init)
(use 'engine.sound.core :reload)
(init)
(use 'engine.sound.core :reload)
(init)
(init {:audio 12})
(use 'engine.sound.core :reload)
ALC10
(ALC10/alcMakeContextCurrent)
(ALC10/alcMakeContextCurrent
)
(.alcMakeContextCurrent ALC10)
(inport org.lwjgl.openal ALC10)
(inport org.lwjgl.openal.ALC10)
(import org.lwjgl.openal.ALC10)
(ALC10/alcMakeContextCurrent)
(import org.lwjgl.openal.ALC11)
(ALC11/ALC_DEFAULT_ALL_DEVICES_SPECIFIER)
(ALC11/ALC_ALL_DEFAULT_DEVICES_SPECIFIER)
(ALC11/ALC_ALL_DEVICES_SPECIFIER)
(ALC10/alcMakeContextCurrent (long 1))
long
(long 11)
(use 'engine.sound.core :reload)
(ALC10/alcMakeContextCurrent 1)
(use 'engine.sound.core :reload)
(conj [1 2 3] 4)
(def *a 11)
*a
(use :reload 'engine.audio.core)
(use :reload 'engine.sound.core)
global
(use :reload 'engine.sound.core)
(init {})
*e
(init {})
*e
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(init {})
(use :reload 'engine.sound.core)
(import 'java.nio.IntBuffer)
(java.nio.IntBuffer 0)
(java.nio.IntBuffer. 0)
\
(java.nio.IntBuffer.)
(java.nio.IntBuffer. *e)
*e
(use :reload 'engine.sound.core)
(init {})
(nio
)
nio
/int-buffer
int-buffer
/int-buffer
/
(/ 0)
(use 'nio.core)
int-buffer
(int-buffer)
(int-buffer 0)
(import 'java.util.Date)
date
(java.util.Date.)
(import 'java.nio.IntBuffer)
(java.nio.IntBuffer)
(java.nio.IntBuffer. 0)
(java.nio.IntBuffer. (int 0))
(java.nio.IntBuffer.)
