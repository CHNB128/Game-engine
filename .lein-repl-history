(def a {:a 15})
(def s :a)
(s a)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test"))})
(use 'engine.example.gamma)
(main)
fn
clojre.core/fn
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test"))})
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(import 'org.lwjgl.glfw GLFW GLFWErrorCallback GLFWKeyCallback)
(import '(org.lwjgl.glfw GLFW GLFWErrorCallback GLFWKeyCallback))
(GLFWErrorCallback/createPrint System/err)
  (->> (GLFWErrorCallback/createPrint System/err)
       (swap! global assoc :errorCallback))
(use :reload 'engine.core)
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.window)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use 'engine.example.gamma)
(main)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.resource.manager)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(use :reload 'engine.core
)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(pprint *1)
(loop!)
(pprint @global)
(loop!)
(exit!)
(exit)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(loop!)
(stop)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(use :reload 'engine.core)
(loop!)
(stop)
(use :reload 'engine.core)
(loop!)
(stop)
(pprint global)
(use :reload 'engine.core)
(loop!)
(pprint global)
(loop!)
(stop)
(:processor @global)
((:processor @global))
((:processor @global) global)
(use :reload 'engine.core)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(use :reload 'engine.core)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(use 'engine.example.omega)
(use 'engine.example.gamma)
(main)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
(loop!)
(stop)
(use :reload engine.graphic.render)
(init-gl)
global
@global
(pprint *1)
(use :reload 'engine.graphic.render)
(loop!)
(init {:window-type :fullscreen :title "asd" :processor (fn [e] (prn "test")) :resources {}})
(loop!)
(stop)
